/* styles.css */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f0f0f0;
    margin: 0;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
}

.envelope {
    position: relative;
    width: 300px;
    height: 200px;
    background-color: blue;
    perspective: 1000px; /* Allows 3D transformations */
}



.envelope .flaps {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d; /* Preserve 3D space for children */
    transition: transform 0.5s ease; /* Animation for opening/closing */
}

.flap {
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
}

.top-flap {
    top: 0;
    left: 0;
    border-width: 100px 150px 0 150px; /* Adjust border widths */
    border-color: blue transparent transparent transparent; /* Color for the top flap */
    transform-origin: top;
}

.bottom-flap {
    bottom: 0;
    left: 0;
    border-width: 0 150px 100px 150px; /* Adjust border widths */
    border-color: transparent transparent blue transparent; /* Color for the bottom flap */
    transform-origin: bottom;
}

.envelope.open .top-flap {
    transform: rotateX(180deg);
}

.envelope.open .bottom-flap {
    transform: rotateX(180deg); /* No rotation needed */
}

.envelope-body {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
}

.dot {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: white;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    cursor: pointer;
    z-index: 2;
}

.content {
    display: none;
    background-color: white;
    padding: 10px;
    position: absolute;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    top: 0;
    left: 0;
    z-index: 1;
    overflow: auto;
    transform: translateZ(1px); /* Ensure content is not affected by rotation */
}

/* Show content when envelope is open */
.envelope.open .content {
    display: block;
}

.images {
    position: absolute;
    top: 50%;
    right: -200px; /* Position to the right of the envelope */
    transform: translateY(-50%); /* Center vertically */
    width: auto;
    height: auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition: opacity 0.5s ease, transform 1s ease; /* Longer transition for scatter effect */
    z-index: 4; /* Ensure images are above the envelope */
}

.envelope.open .images {
    opacity: 1;
    right: 20px; /* Adjust this to control the distance from the envelope */
    transform: translateY(-50%) scale(1); /* Adjust scaling effect as needed */
}

.images img {
    width: 80px; /* Adjust size as needed */
    height: auto;
    margin: 10px;
    position: absolute;
    transition: transform 1s ease; /* Longer transition for scatter effect */
}

/* Scatter images when envelope is open */
.envelope.open .images img {
    /* Add scatter effect */
    transform: translate(
        calc(100px * (1 - 2 * random())),
        calc(100px * (1 - 2 * random()))
    ) rotate(calc(360deg * random()));
}

@keyframes scatter {
    from {
        opacity: 0;
        transform: translateY(50px) scale(0.5);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.images img {
    animation: scatter 1s ease forwards;
}

/* Helper function for random values in calc */
:root {
    --random: calc(random() * 2 - 1); /* Generates random number between -1 and 1 */
}
Explanation:
CSS for .dot:

The .dot is styled to be visible with a white background, a border, and a shadow.
CSS for .images:

Images are initially positioned off-screen and have their opacity set to 0.
When the envelope opens, the images are positioned using calc with random values for translation, creating a scattering effect.
The @keyframes scatter animation helps to fade in and scatter images.
Random Positioning:

To achieve random positioning, CSS calc() and a helper function are used. However, true randomness requires JavaScript, as CSS alone cannot generate random values.
JavaScript (for actual randomness)
Update the JavaScript to scatter images randomly:

script.js
javascript
Copy code
// script.js
document.addEventListener('DOMContentLoaded', function () {
    const envelope = document.querySelector('.envelope');
    const dot = document.querySelector('.dot');
    const images = document.querySelectorAll('.images img');

    dot.addEventListener('click', function () {
        envelope.classList.toggle('open');
        if (envelope.classList.contains('open')) {
            scatterImages();
        }
    });

    function scatterImages() {
        images.forEach(img => {
            const x = Math.random() * 200 - 100; // Random value between -100 and 100
            const y = Math.random() * 200 - 100; // Random value between -100 and 100
            const rotate = Math.random() * 360; // Random rotation between 0 and 360 degrees

            img.style.transform = `translate(${x}px, ${y}px) rotate(${rotate}deg)`;
        });
    }
});
